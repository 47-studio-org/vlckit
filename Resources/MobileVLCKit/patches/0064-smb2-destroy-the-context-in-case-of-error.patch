From 176bd0a55df7615802ef90b1e5c4ac47066e5d58 Mon Sep 17 00:00:00 2001
From: Thomas Guillem <thomas@gllm.fr>
Date: Thu, 17 Mar 2022 16:10:11 +0100
Subject: [PATCH 64/76] smb2: destroy the context in case of error

This fixes a potential stack-buffer-overflow when destroying a context
from Close() if an operation was aborted. Indeed, the smb2_destroy()
function might trigger callbacks with private data that was allocated on
an old function stack. To fix this issue, always destroy the smb2
context immediately after an error (when the struct vlc_smb2_op is
valid).

This issue is currently hidden by the teardown mechanism (but still
possible), that always try to close gracefully in case of error.

(cherry picked from commit 924c951518f02dd05436d46323301702df516f4f)
Signed-off-by: Thomas Guillem <thomas@gllm.fr>
---
 modules/access/smb2.c | 83 ++++++++++++++++++++++++-------------------
 1 file changed, 47 insertions(+), 36 deletions(-)

diff --git a/modules/access/smb2.c b/modules/access/smb2.c
index 64c254a188..c708c17634 100644
--- a/modules/access/smb2.c
+++ b/modules/access/smb2.c
@@ -111,8 +111,6 @@ struct access_sys
     vlc_url_t               encoded_url;
     bool                    eof;
     bool                    smb2_connected;
-
-    int                     error_status;
 };
 
 struct vlc_smb2_op
@@ -120,6 +118,7 @@ struct vlc_smb2_op
     vlc_object_t *log;
 
     struct smb2_context *smb2;
+    struct smb2_context **smb2p;
 
     int error_status;
 
@@ -133,18 +132,20 @@ struct vlc_smb2_op
     } res;
 };
 
-#define VLC_SMB2_OP(access, smb2_) { \
+#define VLC_SMB2_OP(access, smb2p_) { \
     .log = access ? VLC_OBJECT(access) : NULL, \
-    .smb2 = smb2_, \
-    .error_status = access ? ((struct access_sys *)access->p_sys)->error_status : 0, \
+    .smb2p = smb2p_, \
+    .smb2 = (assert(*smb2p_ != NULL), *smb2p_), \
+    .error_status = 0, \
     .res_done = false, \
 };
 
 static inline void
-vlc_smb2_op_reset(struct vlc_smb2_op *op, struct smb2_context *smb2)
+vlc_smb2_op_reset(struct vlc_smb2_op *op, struct smb2_context **smb2p)
 {
     op->res_done = false;
-    op->smb2 = smb2;
+    op->smb2p = smb2p;
+    op->smb2 = *smb2p;
     op->error_status = 0;
 }
 
@@ -176,6 +177,9 @@ smb2_set_error(struct vlc_smb2_op *op, const char *psz_func, int err)
         op->error_status = err;
     else if (op->error_status == 0) /* don't override if set via smb2_check_status */
         op->error_status = -EINVAL;
+
+    smb2_destroy_context(op->smb2);
+    *op->smb2p = NULL;
 }
 
 #define VLC_SMB2_CHECK_STATUS(op, status) \
@@ -327,7 +331,7 @@ FileRead(stream_t *access, void *buf, size_t len)
 {
     struct access_sys *sys = access->p_sys;
 
-    if (sys->eof || sys->error_status != 0)
+    if (sys->eof || sys->smb2 == NULL)
         return 0;
 
     /* Limit the read size since smb2_read_async() will complete only after
@@ -336,7 +340,7 @@ FileRead(stream_t *access, void *buf, size_t len)
     if (len > 262144)
         len = 262144;
 
-    struct vlc_smb2_op op = VLC_SMB2_OP(access, sys->smb2);
+    struct vlc_smb2_op op = VLC_SMB2_OP(access, &sys->smb2);
     op.res.read.len = 0;
 
     int err = smb2_read_async(sys->smb2, sys->smb2fh, buf, len,
@@ -348,10 +352,7 @@ FileRead(stream_t *access, void *buf, size_t len)
     }
 
     if (vlc_smb2_mainloop(&op, false) < 0)
-    {
-        sys->error_status = op.error_status;
         return 0;
-    }
 
     if (op.res.read.len == 0)
         sys->eof = true;
@@ -364,10 +365,10 @@ FileSeek(stream_t *access, uint64_t i_pos)
 {
     struct access_sys *sys = access->p_sys;
 
-    if (sys->error_status != 0)
+    if (sys->smb2 == NULL)
         return VLC_EGENERIC;
 
-    struct vlc_smb2_op op = VLC_SMB2_OP(access, sys->smb2);
+    struct vlc_smb2_op op = VLC_SMB2_OP(access, &sys->smb2);
 
     int err = smb2_lseek(op.smb2, sys->smb2fh, i_pos, SEEK_SET, NULL);
     if (err < 0)
@@ -521,12 +522,12 @@ ShareEnum(stream_t *access, input_item_node_t *p_node)
 }
 
 static int
-vlc_smb2_close_fh(stream_t *access, struct smb2_context *smb2,
+vlc_smb2_close_fh(stream_t *access, struct smb2_context **smb2p,
                   struct smb2fh *smb2fh)
 {
-    struct vlc_smb2_op op = VLC_SMB2_OP(access, smb2);
+    struct vlc_smb2_op op = VLC_SMB2_OP(access, smb2p);
 
-    int err = smb2_close_async(smb2, smb2fh, smb2_generic_cb, &op);
+    int err = smb2_close_async(op.smb2, smb2fh, smb2_generic_cb, &op);
     if (err < 0)
     {
         VLC_SMB2_SET_ERROR(&op, "smb2_close_async", err);
@@ -537,11 +538,11 @@ vlc_smb2_close_fh(stream_t *access, struct smb2_context *smb2,
 }
 
 static int
-vlc_smb2_disconnect_share(stream_t *access, struct smb2_context *smb2)
+vlc_smb2_disconnect_share(stream_t *access, struct smb2_context **smb2p)
 {
-    struct vlc_smb2_op op = VLC_SMB2_OP(access, smb2);
+    struct vlc_smb2_op op = VLC_SMB2_OP(access, smb2p);
 
-    int err = smb2_disconnect_share_async(smb2, smb2_generic_cb, &op);
+    int err = smb2_disconnect_share_async(op.smb2, smb2_generic_cb, &op);
     if (err < 0)
     {
         VLC_SMB2_SET_ERROR(&op, "smb2_connect_share_async", err);
@@ -593,20 +594,20 @@ vlc_smb2_print_addr(stream_t *access)
 }
 
 static int
-vlc_smb2_open_share(stream_t *access, struct smb2_context *smb2,
+vlc_smb2_open_share(stream_t *access, struct smb2_context **smb2p,
                     struct smb2_url *smb2_url, bool do_enum)
 {
     struct access_sys *sys = access->p_sys;
     struct smb2_stat_64 smb2_stat;
 
-    struct vlc_smb2_op op = VLC_SMB2_OP(access, smb2);
+    struct vlc_smb2_op op = VLC_SMB2_OP(access, smb2p);
 
     int ret;
     if (do_enum)
-        ret = smb2_share_enum_async(smb2, smb2_open_cb, &op);
+        ret = smb2_share_enum_async(op.smb2, smb2_open_cb, &op);
     else
     {
-        ret = smb2_stat_async(smb2, smb2_url->path, &smb2_stat,
+        ret = smb2_stat_async(op.smb2, smb2_url->path, &smb2_stat,
                               smb2_generic_cb, &op);
         if (ret < 0)
         {
@@ -619,17 +620,17 @@ vlc_smb2_open_share(stream_t *access, struct smb2_context *smb2,
 
         if (smb2_stat.smb2_type == SMB2_TYPE_FILE)
         {
-            vlc_smb2_op_reset(&op, smb2);
+            vlc_smb2_op_reset(&op, smb2p);
 
             sys->smb2_size = smb2_stat.smb2_size;
-            ret = smb2_open_async(smb2, smb2_url->path, O_RDONLY,
+            ret = smb2_open_async(op.smb2, smb2_url->path, O_RDONLY,
                                   smb2_open_cb, &op);
         }
         else if (smb2_stat.smb2_type == SMB2_TYPE_DIRECTORY)
         {
-            vlc_smb2_op_reset(&op, smb2);
+            vlc_smb2_op_reset(&op, smb2p);
 
-            ret = smb2_opendir_async(smb2, smb2_url->path, smb2_open_cb, &op);
+            ret = smb2_opendir_async(op.smb2, smb2_url->path, smb2_open_cb, &op);
         }
         else
         {
@@ -699,7 +700,7 @@ vlc_smb2_connect_open_share(stream_t *access, const char *url,
     smb2_set_password(sys->smb2, password);
     smb2_set_domain(sys->smb2, domain ? domain : "");
 
-    struct vlc_smb2_op op = VLC_SMB2_OP(access, sys->smb2);
+    struct vlc_smb2_op op = VLC_SMB2_OP(access, &sys->smb2);
     int err = smb2_connect_share_async(sys->smb2, smb2_url->server, share,
                                        username, smb2_generic_cb, &op);
     if (err < 0)
@@ -714,7 +715,7 @@ vlc_smb2_connect_open_share(stream_t *access, const char *url,
 
     vlc_smb2_print_addr(access);
 
-    err = vlc_smb2_open_share(access, sys->smb2, smb2_url, do_enum);
+    err = vlc_smb2_open_share(access, &sys->smb2, smb2_url, do_enum);
     if (err < 0)
     {
         op.error_status = err;
@@ -732,11 +733,14 @@ error:
     {
         if (sys->smb2_connected)
         {
-            vlc_smb2_disconnect_share(access, sys->smb2);
+            vlc_smb2_disconnect_share(access, &sys->smb2);
             sys->smb2_connected = false;
         }
-        smb2_destroy_context(sys->smb2);
-        sys->smb2 = NULL;
+        if (sys->smb2 != NULL)
+        {
+            smb2_destroy_context(sys->smb2);
+            sys->smb2 = NULL;
+        }
     }
     return op.error_status;
 }
@@ -909,7 +913,10 @@ Close(vlc_object_t *p_obj)
     struct access_sys *sys = access->p_sys;
 
     if (sys->smb2fh != NULL)
-        vlc_smb2_close_fh(access, sys->smb2, sys->smb2fh);
+    {
+        if (sys->smb2)
+            vlc_smb2_close_fh(access, &sys->smb2, sys->smb2fh);
+    }
     else if (sys->smb2dir != NULL)
         smb2_closedir(sys->smb2, sys->smb2dir);
     else if (sys->share_enum != NULL)
@@ -919,8 +926,12 @@ Close(vlc_object_t *p_obj)
 
     assert(sys->smb2_connected);
 
-    vlc_smb2_disconnect_share(access, sys->smb2);
-    smb2_destroy_context(sys->smb2);
+    if (sys->smb2 != NULL)
+    {
+        vlc_smb2_disconnect_share(access, &sys->smb2);
+        if (sys->smb2 != NULL)
+            smb2_destroy_context(sys->smb2);
+    }
 
     vlc_UrlClean(&sys->encoded_url);
 }
-- 
2.32.0 (Apple Git-132)

