From 81ecf3108d8da7bc893fa3aa050696ffdf4068c5 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Felix=20Paul=20K=C3=BChne?= <felix@feepk.net>
Date: Mon, 25 Jan 2021 19:56:01 +0100
Subject: [PATCH 06/14] webservices: avoid symbol conflict

---
 modules/misc/webservices/json.c                   | 2 +-
 modules/misc/webservices/json.h                   | 2 +-
 modules/stream_out/chromecast/chromecast_ctrl.cpp | 8 ++++----
 3 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/modules/misc/webservices/json.c b/modules/misc/webservices/json.c
index e5dc476f16..0810ec8f3d 100644
--- a/modules/misc/webservices/json.c
+++ b/modules/misc/webservices/json.c
@@ -940,7 +940,7 @@ e_failed:
    return 0;
 }
 
-json_value * json_parse (const json_char * json, size_t length)
+json_value * json_parse_simple (const json_char * json, size_t length)
 {
    json_settings settings = { 0 };
    return json_parse_ex (&settings, json, length, 0);
diff --git a/modules/misc/webservices/json.h b/modules/misc/webservices/json.h
index 38d3abde5d..75d3bc71ba 100644
--- a/modules/misc/webservices/json.h
+++ b/modules/misc/webservices/json.h
@@ -252,7 +252,7 @@ typedef struct _json_value
 
 } json_value;
 
-json_value * json_parse (const json_char * json,
+json_value * json_parse_simple (const json_char * json,
                          size_t length);
 
 #define json_error_max 128
diff --git a/modules/stream_out/chromecast/chromecast_ctrl.cpp b/modules/stream_out/chromecast/chromecast_ctrl.cpp
index cb41b78142..f01737f07b 100644
--- a/modules/stream_out/chromecast/chromecast_ctrl.cpp
+++ b/modules/stream_out/chromecast/chromecast_ctrl.cpp
@@ -671,7 +671,7 @@ void intf_sys_t::processAuthMessage( const castchannel::CastMessage& msg )
 
 void intf_sys_t::processHeartBeatMessage( const castchannel::CastMessage& msg )
 {
-    json_value *p_data = json_parse(msg.payload_utf8().c_str(), msg.payload_utf8().length());
+    json_value *p_data = json_parse_simple(msg.payload_utf8().c_str(), msg.payload_utf8().length());
     std::string type((*p_data)["type"]);
 
     if (type == "PING")
@@ -694,7 +694,7 @@ void intf_sys_t::processHeartBeatMessage( const castchannel::CastMessage& msg )
 
 bool intf_sys_t::processReceiverMessage( const castchannel::CastMessage& msg )
 {
-    json_value *p_data = json_parse(msg.payload_utf8().c_str(), msg.payload_utf8().length());
+    json_value *p_data = json_parse_simple(msg.payload_utf8().c_str(), msg.payload_utf8().length());
     std::string type((*p_data)["type"]);
 
     bool ret = true;
@@ -798,7 +798,7 @@ bool intf_sys_t::processReceiverMessage( const castchannel::CastMessage& msg )
 
 void intf_sys_t::processMediaMessage( const castchannel::CastMessage& msg )
 {
-    json_value *p_data = json_parse(msg.payload_utf8().c_str(), msg.payload_utf8().length());
+    json_value *p_data = json_parse_simple(msg.payload_utf8().c_str(), msg.payload_utf8().length());
     std::string type((*p_data)["type"]);
     int64_t requestId = (json_int_t) (*p_data)["requestId"];
 
@@ -945,7 +945,7 @@ void intf_sys_t::processMediaMessage( const castchannel::CastMessage& msg )
 
 void intf_sys_t::processConnectionMessage( const castchannel::CastMessage& msg )
 {
-    json_value *p_data = json_parse(msg.payload_utf8().c_str(), msg.payload_utf8().length());
+    json_value *p_data = json_parse_simple(msg.payload_utf8().c_str(), msg.payload_utf8().length());
     std::string type((*p_data)["type"]);
     json_value_free(p_data);
 
-- 
2.39.2 (Apple Git-143)

